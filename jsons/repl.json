{
  "default_js_slang": "<div><h4>default_js_slang(_program: string) → {any}</h4><div class=\"description\"><p>When use this function as the entrance function in the parameter of \"set_evaluator\", the Programmable Repl will directly use the default js-slang interpreter to run your program in Programmable Repl editor. Do not directly call this function in your own code.</p></div></div>",
  "repl_display": "<div><h4>repl_display(content: any) → {any}</h4><div class=\"description\"><p>Display message in Programmable Repl Tab\nIf you give a pair as the parameter, it will use the given pair to generate rich text and use rich text display mode to display the string in Programmable Repl Tab with undefined return value (see module description for more information).\nIf you give other things as the parameter, it will simply display the toString value of the parameter in Programmable Repl Tab and returns the displayed string itself.</p><p><strong>Rich Text Display</strong></p><ul><li>First you need to <code>import { repl_display } from \"repl\";</code></li><li>Format: pair(pair(\"string\",style),style)...</li><li>Examples:</li></ul><p><pre><code>// A large italic underlined \"Hello World\"\nrepl_display(pair(pair(pair(pair(\"Hello World\", \"underline\"), \"italic\"), \"bold\"), \"gigantic\"));\n\n// A large italic underlined \"Hello World\" in blue\nrepl_display(pair(pair(pair(pair(pair(\"Hello World\", \"underline\"),\"italic\"), \"bold\"), \"gigantic\"), \"clrt#0000ff\"));\n\n// A large italic underlined \"Hello World\" with orange foreground and purple background\nrepl_display(pair(pair(pair(pair(pair(pair(\"Hello World\", \"underline\"), \"italic\"), \"bold\"), \"gigantic\"), \"clrb#A000A0\"),\"clrt#ff9700\"));</code></pre></p><ul><li>Coloring:\n<ul><li><code>clrt</code> stands for text color, <code>clrb</code> stands for background color. The color string are in hexadecimal begin with \"#\" and followed by 6 hexadecimal digits.</li><li>Example:  <code>pair(\"123\",\"clrt#ff0000\")</code> will produce a red \"123\";  <code>pair(\"456\",\"clrb#00ff00\")</code> will produce a green \"456\".</li></ul></li><li>Besides coloring, the following styles are also supported:\n<ul><li><code>bold</code>: Make the text bold.</li><li><code>italic</code>: Make the text italic.</li><li><code>small</code>: Make the text in small size.</li><li><code>medium</code>: Make the text in medium size.</li><li><code>large</code>: Make the text in large size.</li><li><code>gigantic</code>: Make the text in very large size.</li><li><code>underline</code>: Underline the text.</li></ul></li><li>Note that if you apply the conflicting attributes together, only one conflicted style will take effect and other conflicting styles will be discarded, like  \"pair(pair(pair(\"123\", small), medium), large) \"  (Set conflicting font size for the same text)</li><li>Also note that for safety matters, certain words and characters are not allowed to appear under rich text display mode.</li></ul></div></div>",
  "set_background_image": "<div><h4>set_background_image(img_url: string, background_color_alpha: number) → {void}</h4><div class=\"description\"><p>Set Programmable Repl editor background image with a customized image URL</p></div></div>",
  "set_evaluator": "<div><h4>set_evaluator(evalFunc: Function) → {undefined}</h4><div class=\"description\"><p>Setup the programmable REPL with given evaulator's entrance function</p><p>The function should take one parameter as the code from the module's editor, for example:<pre><code>function parse_and_evaluate(code) {\n  // ...\n}</code></pre></p></div></div>",
  "set_font_size": "<div><h4>set_font_size(font_size_px: number) → {void}</h4><div class=\"description\"><p>Set Programmable Repl editor font size</p></div></div>"
}