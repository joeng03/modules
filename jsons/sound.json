{
  "adsr": {
    "kind": "function",
    "name": "adsr",
    "description": "<p>Returns an envelope: a function from Sound to Sound.\nWhen the adsr envelope is applied to a Sound, it returns\na new Sound with its amplitude modified according to parameters\nThe relative amplitude increases from 0 to 1 linearly over the\nattack proportion, then decreases from 1 to sustain level over the\ndecay proportion, and remains at that level until the release\nproportion when it decays back to 0.</p>",
    "params": [
      [
        "attack_ratio",
        "number"
      ],
      [
        "decay_ratio",
        "number"
      ],
      [
        "sustain_level",
        "number"
      ],
      [
        "release_ratio",
        "number"
      ]
    ],
    "retType": "SoundTransformer"
  },
  "bell": {
    "kind": "function",
    "name": "bell",
    "description": "<p>returns a Sound reminiscent of a bell, playing\na given note for a given duration</p>",
    "params": [
      [
        "note",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "cello": {
    "kind": "function",
    "name": "cello",
    "description": "<p>returns a Sound reminiscent of a cello, playing\na given note for a given duration</p>",
    "params": [
      [
        "note",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "consecutively": {
    "kind": "function",
    "name": "consecutively",
    "description": "<p>Makes a new Sound by combining the sounds in a given list\nwhere the second Sound is appended to the end of the first Sound,\nthe third Sound is appended to the end of the second Sound, and\nso on. The effect is that the Sounds in the list are joined end-to-end</p>",
    "params": [
      [
        "list_of_sounds",
        "List"
      ]
    ],
    "retType": "Sound"
  },
  "get_duration": {
    "kind": "function",
    "name": "get_duration",
    "description": "<p>Accesses the duration of a given Sound.</p>",
    "params": [
      [
        "sound",
        "Sound"
      ]
    ],
    "retType": "number"
  },
  "get_wave": {
    "kind": "function",
    "name": "get_wave",
    "description": "<p>Accesses the wave function of a given Sound.</p>",
    "params": [
      [
        "sound",
        "Sound"
      ]
    ],
    "retType": "Wave"
  },
  "init_record": {
    "kind": "function",
    "name": "init_record",
    "description": "<p>Initialize recording by obtaining permission\nto use the default device microphone</p>",
    "params": [],
    "retType": "string"
  },
  "is_sound": {
    "kind": "function",
    "name": "is_sound",
    "description": "<p>Checks if the argument is a Sound</p>",
    "params": [
      [
        "x",
        "any"
      ]
    ],
    "retType": "x is Sound"
  },
  "letter_name_to_frequency": {
    "kind": "function",
    "name": "letter_name_to_frequency",
    "description": "<p>Converts a letter name to its corresponding frequency.</p>",
    "params": [
      [
        "note",
        "string"
      ]
    ],
    "retType": "number"
  },
  "letter_name_to_midi_note": {
    "kind": "function",
    "name": "letter_name_to_midi_note",
    "description": "<p>Converts a letter name to its corresponding MIDI note.\nThe letter name is represented in standard pitch notation.\nExamples are \"A5\", \"Db3\", \"C#7\".\nRefer to &lt;a href=\"https://i.imgur.com/qGQgmYr.png\"&gt;this mapping from\nletter name to midi notes.</p>",
    "params": [
      [
        "note",
        "string"
      ]
    ],
    "retType": "number"
  },
  "make_sound": {
    "kind": "function",
    "name": "make_sound",
    "description": "<p>Makes a Sound with given wave function and duration.\nThe wave function is a function: number -&gt; number\nthat takes in a non-negative input time and returns an amplitude\nbetween -1 and 1.</p>",
    "params": [
      [
        "wave",
        "Wave"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "midi_note_to_frequency": {
    "kind": "function",
    "name": "midi_note_to_frequency",
    "description": "<p>Converts a MIDI note to its corresponding frequency.</p>",
    "params": [
      [
        "note",
        "number"
      ]
    ],
    "retType": "number"
  },
  "noise_sound": {
    "kind": "function",
    "name": "noise_sound",
    "description": "<p>Makes a noise Sound with given duration</p>",
    "params": [
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "phase_mod": {
    "kind": "function",
    "name": "phase_mod",
    "description": "<p>Returns a Sound transformer which uses its argument\nto modulate the phase of a (carrier) sine wave\nof given frequency and duration with a given Sound.\nModulating with a low frequency Sound results in a vibrato effect.\nModulating with a Sound with frequencies comparable to\nthe sine wave frequency results in more complex wave forms.</p>",
    "params": [
      [
        "freq",
        "number"
      ],
      [
        "duration",
        "number"
      ],
      [
        "amount",
        "number"
      ]
    ],
    "retType": "SoundTransformer"
  },
  "piano": {
    "kind": "function",
    "name": "piano",
    "description": "<p>returns a Sound reminiscent of a piano, playing\na given note for a given duration</p>",
    "params": [
      [
        "note",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "play": {
    "kind": "function",
    "name": "play",
    "description": "<p>Plays the given Sound using the computer’s sound device\non top of any Sounds that are currently playing.</p>",
    "params": [
      [
        "sound",
        "Sound"
      ]
    ],
    "retType": "Sound"
  },
  "play_in_tab": {
    "kind": "function",
    "name": "play_in_tab",
    "description": "<p>Plays the given Sound using the computer’s sound device.\nThe sound is added to a list of sounds to be played one-at-a-time\nin a Source Academy tab.</p>",
    "params": [
      [
        "sound",
        "Sound"
      ]
    ],
    "retType": "Sound"
  },
  "play_wave": {
    "kind": "function",
    "name": "play_wave",
    "description": "<p>Plays the given Wave using the computer’s sound device, for the duration\ngiven in seconds.</p>",
    "params": [
      [
        "wave",
        "Wave"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "record": {
    "kind": "function",
    "name": "record",
    "description": "<p>Records a sound until the returned stop function is called.\nTakes a &lt;CODE&gt;buffer&lt;/CODE&gt; duration (in seconds) as argument, and\nreturns a nullary stop function &lt;CODE&gt;stop&lt;/CODE&gt;. A call\n&lt;CODE&gt;stop()&lt;/CODE&gt; returns a Sound promise: a nullary function\nthat returns a Sound. Example: &lt;PRE&gt;&lt;CODE&gt;init_record();\nconst stop = record(0.5);\n// record after 0.5 seconds. Then in next query:\nconst promise = stop();\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());&lt;/CODE&gt;&lt;/PRE&gt;</p>",
    "params": [
      [
        "buffer",
        "number"
      ]
    ],
    "retType": "Function"
  },
  "record_for": {
    "kind": "function",
    "name": "record_for",
    "description": "<p>Records a sound of given &lt;CODE&gt;duration&lt;/CODE&gt; in seconds, after\na &lt;CODE&gt;buffer&lt;/CODE&gt; also in seconds, and\nreturns a Sound promise: a nullary function\nthat returns a Sound. Example: &lt;PRE&gt;&lt;CODE&gt;init_record();\nconst promise = record_for(2, 0.5);\n// In next query, you can play the promised Sound, by\n// applying the promise:\nplay(promise());&lt;/CODE&gt;&lt;/PRE&gt;</p>",
    "params": [
      [
        "duration",
        "number"
      ],
      [
        "buffer",
        "number"
      ]
    ],
    "retType": "Function"
  },
  "sawtooth_sound": {
    "kind": "function",
    "name": "sawtooth_sound",
    "description": "<p>Makes a sawtooth wave Sound with given frequency and duration</p>",
    "params": [
      [
        "freq",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "silence_sound": {
    "kind": "function",
    "name": "silence_sound",
    "description": "<p>Makes a silence Sound with given duration</p>",
    "params": [
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "simultaneously": {
    "kind": "function",
    "name": "simultaneously",
    "description": "<p>Makes a new Sound by combining the Sounds in a given list.\nIn the result sound, the component sounds overlap such that\nthey start at the beginning of the result sound. To achieve\nthis, the amplitudes of the component sounds are added together\nand then divided by the length of the list.</p>",
    "params": [
      [
        "list_of_sounds",
        "List"
      ]
    ],
    "retType": "Sound"
  },
  "sine_sound": {
    "kind": "function",
    "name": "sine_sound",
    "description": "<p>Makes a sine wave Sound with given frequency and duration</p>",
    "params": [
      [
        "freq",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "square_sound": {
    "kind": "function",
    "name": "square_sound",
    "description": "<p>Makes a square wave Sound with given frequency and duration</p>",
    "params": [
      [
        "f",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "stacking_adsr": {
    "kind": "function",
    "name": "stacking_adsr",
    "description": "<p>Returns a Sound that results from applying a list of envelopes\nto a given wave form. The wave form is a Sound generator that\ntakes a frequency and a duration as arguments and produces a\nSound with the given frequency and duration. Each envelope is\napplied to a harmonic: the first harmonic has the given frequency,\nthe second has twice the frequency, the third three times the\nfrequency etc. The harmonics are then layered simultaneously to\nproduce the resulting Sound.</p>",
    "params": [
      [
        "waveform",
        "SoundProducer"
      ],
      [
        "base_frequency",
        "number"
      ],
      [
        "duration",
        "number"
      ],
      [
        "envelopes",
        "List"
      ]
    ],
    "retType": "Sound"
  },
  "stop": {
    "kind": "function",
    "name": "stop",
    "description": "<p>Stops all currently playing sounds.</p>",
    "params": [],
    "retType": "void"
  },
  "triangle_sound": {
    "kind": "function",
    "name": "triangle_sound",
    "description": "<p>Makes a triangle wave Sound with given frequency and duration</p>",
    "params": [
      [
        "freq",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "trombone": {
    "kind": "function",
    "name": "trombone",
    "description": "<p>returns a Sound reminiscent of a trombone, playing\na given note for a given duration</p>",
    "params": [
      [
        "note",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  },
  "violin": {
    "kind": "function",
    "name": "violin",
    "description": "<p>returns a Sound reminiscent of a violin, playing\na given note for a given duration</p>",
    "params": [
      [
        "note",
        "number"
      ],
      [
        "duration",
        "number"
      ]
    ],
    "retType": "Sound"
  }
}