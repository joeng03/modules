{
  "add_impulse_force": {
    "kind": "function",
    "name": "add_impulse_force",
    "description": "<p>Add an impulse force on the Rigidbody attached on the GameObject, <strong>using its mass</strong>.</p><p>Usage of all physics functions under the Physics category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "force",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "add_vectors": {
    "kind": "function",
    "name": "add_vectors",
    "description": "<p>Add two 3D vectors together.</p>",
    "params": [
      [
        "vectorA",
        "Vector3"
      ],
      [
        "vectorB",
        "Vector3"
      ]
    ],
    "retType": "Vector3"
  },
  "apply_rigidbody": {
    "kind": "function",
    "name": "apply_rigidbody",
    "description": "<p>Apply rigidbody (2D or 3D based on the current dimension mode) to the given GameObject to use Unity's physics engine.</p><p>All other functions under the Physics - Rigidbody category require calling this function first on the applied GameObjects.</p><p>For more information, see</p><ul><li>https://docs.unity3d.com/ScriptReference/Rigidbody.html (For 3D Mode)</li><li>https://docs.unity3d.com/ScriptReference/Rigidbody2D.html (For 2D Mode)</li></ul>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "void"
  },
  "copy_position": {
    "kind": "function",
    "name": "copy_position",
    "description": "<p>Copy the position values from one GameObject to another GameObject along with delta values.</p><p>Set one or more coordinate value(s) in the <code>deltaPosition</code> Vector3 to the exact value \"999999\" (six nines) to remain the position of the destination GameObject on the corresponding axis/axes unaffected by this function.</p>",
    "params": [
      [
        "from",
        "GameObjectIdentifier"
      ],
      [
        "to",
        "GameObjectIdentifier"
      ],
      [
        "deltaPosition",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "copy_rotation": {
    "kind": "function",
    "name": "copy_rotation",
    "description": "<p>Copy the rotation values (Euler angles) from one GameObject to another GameObject along with delta values.</p><p>Set one or more coordinate value(s) in the <code>deltaPosition</code> Vector3 to the exact value \"999999\" (six nines) to remain the rotation of the destination GameObject on the corresponding axis/axes unaffected by this function.</p>",
    "params": [
      [
        "from",
        "GameObjectIdentifier"
      ],
      [
        "to",
        "GameObjectIdentifier"
      ],
      [
        "deltaRotation",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "copy_scale": {
    "kind": "function",
    "name": "copy_scale",
    "description": "<p>Copy the scale values from one GameObject to another GameObject along with delta values.</p><p>Set one or more coordinate value(s) in the <code>deltaPosition</code> Vector3 to the exact value \"999999\" (six nines) to remain the scale of the destination GameObject on the corresponding axis/axes unaffected by this function.</p>",
    "params": [
      [
        "from",
        "GameObjectIdentifier"
      ],
      [
        "to",
        "GameObjectIdentifier"
      ],
      [
        "deltaScale",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "cross": {
    "kind": "function",
    "name": "cross",
    "description": "<p>Calcuate the cross product of two 3D vectors.</p>",
    "params": [
      [
        "vectorA",
        "Vector3"
      ],
      [
        "vectorB",
        "Vector3"
      ]
    ],
    "retType": "Vector3"
  },
  "debug_log": {
    "kind": "function",
    "name": "debug_log",
    "description": "<p>Log to Unity Academy Embedded Frontend's console.</p><p>You can use rich text for the parameter <code>content</code>.</p>",
    "params": [
      [
        "content",
        "any"
      ]
    ],
    "retType": "void"
  },
  "debug_logerror": {
    "kind": "function",
    "name": "debug_logerror",
    "description": "<p>Log to Unity Academy Embedded Frontend's console, with red font color as highlighting.</p><p>Note that this function does not \"really\" throw any error. It just logs a message with red font color and the student code will continue running normally after calling this function to log the error.</p><p>You can use rich text for the parameter <code>content</code>.</p>",
    "params": [
      [
        "content",
        "any"
      ]
    ],
    "retType": "void"
  },
  "debug_logwarning": {
    "kind": "function",
    "name": "debug_logwarning",
    "description": "<p>Log to Unity Academy Embedded Frontend's console, with yellow font color as highlighting.</p><p>You can use rich text for the parameter <code>content</code>.</p>",
    "params": [
      [
        "content",
        "any"
      ]
    ],
    "retType": "void"
  },
  "delta_time": {
    "kind": "function",
    "name": "delta_time",
    "description": "<p>Returns the value of Time.deltaTime in Unity ( roughly saying it's about <code>1 / instant_frame_rate_per_second</code> )</p><p>This should be useful when implementing timers or constant speed control in Update function.</p><p>For example:<pre><code>function update(gameObject){\n    const move_speed = 3;\n    translate_world(gameObject, 0, 0, move_speed * delta_time());\n}</code></pre>\nBy assigning the above code to a GameObject with <code>set_update</code>, that GameObject will move in a constant speed for about 3 units per second along world +Z axis.</p><p>For more information, see https://docs.unity3d.com/ScriptReference/Time-deltaTime.html</p>",
    "params": [],
    "retType": "number"
  },
  "destroy": {
    "kind": "function",
    "name": "destroy",
    "description": "<p>Removes a GameObject</p><p>Note that this won't remove the GameObject immediately, the actual removal will happen at the end of the current main cycle loop.</p><p>For more information, see https://docs.unity3d.com/ScriptReference/Object.Destroy.html</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "void"
  },
  "dot": {
    "kind": "function",
    "name": "dot",
    "description": "<p>Calcuate the dot product of two 3D vectors.</p>",
    "params": [
      [
        "vectorA",
        "Vector3"
      ],
      [
        "vectorB",
        "Vector3"
      ]
    ],
    "retType": "number"
  },
  "gameobject_distance": {
    "kind": "function",
    "name": "gameobject_distance",
    "description": "<p>Calcuate the distance between two GameObjects, based on each other's position</p>",
    "params": [
      [
        "gameObjectIdentifier_A",
        "GameObjectIdentifier"
      ],
      [
        "gameObjectIdentifier_B",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "number"
  },
  "get_angular_velocity": {
    "kind": "function",
    "name": "get_angular_velocity",
    "description": "<p>Returns the angular velocity of the rigidbody attached on the game object.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p><p>**2D Mode Special: **In 2D mode there is no angular velocity on X nor Y axis, so in the X and Y values in the returned Vector3 will always be zero.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "Vector3"
  },
  "get_custom_prop": {
    "kind": "function",
    "name": "get_custom_prop",
    "description": "<p>Get the value of a custom property with its name on a GameObject</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "propName",
        "string"
      ]
    ],
    "retType": "any"
  },
  "get_key": {
    "kind": "function",
    "name": "get_key",
    "description": "<p>When user presses a key on the keyboard or mouse button, this function will return true in every frame that the key is still being pressed and false otherwise.</p><p>For more information, see https://docs.unity3d.com/ScriptReference/Input.GetKey.html</p>",
    "params": [
      [
        "keyCode",
        "string"
      ]
    ],
    "retType": "boolean"
  },
  "get_key_down": {
    "kind": "function",
    "name": "get_key_down",
    "description": "<p>When user presses a key on the keyboard or mouse button, this function will return true only at the frame when the key is just pressed down and return false afterwards.</p><p>For more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyDown.html</p>",
    "params": [
      [
        "keyCode",
        "string"
      ]
    ],
    "retType": "boolean"
  },
  "get_key_up": {
    "kind": "function",
    "name": "get_key_up",
    "description": "<p>When user releases a pressed key on the keyboard or mouse button, this function will return true only at the frame when the key is just released up and return false otherwise.</p><p>For more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyUp.html</p>",
    "params": [
      [
        "keyCode",
        "string"
      ]
    ],
    "retType": "boolean"
  },
  "get_main_camera_following_target": {
    "kind": "function",
    "name": "get_main_camera_following_target",
    "description": "<p>Get the main camera following target GameObject (an invisible GameObject) to use it to control the position of the main camera with the default camera controller.</p><ul><li><strong>In 3D mode</strong>, the default camera controller behaves as third-person camera controller, and the center to follow is the following target GameObject. Also, Unity Academy will automatically set the rotation of this \"following target\" to the same rotation as the current main camera's rotation to let you get the main camera's rotation.</li><li><strong>In 2D mode</strong>, the default camera controller will follow the target GameObject to move, along with a position delta value that you can adjust with the arrow keys on your keyboard.</li></ul><p>The main camera following target GameObject is a primitive GameObject. This means that you are not allowed to destroy it and/or instantiate it during runtime. Multiple calls to this function will return GameObject identifiers that refer to the same primitive GameObject.</p><p><strong>If default main camera controllers are disabled (you have called <code>request_for_main_camera_control</code>), then the following target GameObject is useless.</strong></p>",
    "params": [],
    "retType": "GameObjectIdentifier"
  },
  "get_mass": {
    "kind": "function",
    "name": "get_mass",
    "description": "<p>Returns the mass of the rigidbody attached on the GameObject.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "number"
  },
  "get_position": {
    "kind": "function",
    "name": "get_position",
    "description": "<p>Returns the world position of a given GameObject</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "Vector3"
  },
  "get_rotation_euler": {
    "kind": "function",
    "name": "get_rotation_euler",
    "description": "<p>Returns the world Euler angle rotation of a given GameObject</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "Vector3"
  },
  "get_scale": {
    "kind": "function",
    "name": "get_scale",
    "description": "<p>Returns the scale (size factor) of a given GameObject</p><p>By default the scale of a GameObject is (1, 1, 1)</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "Vector3"
  },
  "get_velocity": {
    "kind": "function",
    "name": "get_velocity",
    "description": "<p>Returns the velocity of the rigidbody attached on the GameObject.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "Vector3"
  },
  "get_x": {
    "kind": "function",
    "name": "get_x",
    "description": "<p>Get the X component of a 3D vector</p>",
    "params": [
      [
        "vector",
        "Vector3"
      ]
    ],
    "retType": "number"
  },
  "get_y": {
    "kind": "function",
    "name": "get_y",
    "description": "<p>Get the Y component of a 3D vector</p>",
    "params": [
      [
        "vector",
        "Vector3"
      ]
    ],
    "retType": "number"
  },
  "get_z": {
    "kind": "function",
    "name": "get_z",
    "description": "<p>Get the Z component of a 3D vector</p>",
    "params": [
      [
        "vector",
        "Vector3"
      ]
    ],
    "retType": "number"
  },
  "gui_button": {
    "kind": "function",
    "name": "gui_button",
    "description": "<p>Make a button on the screen with given <strong>screen space position</strong> in the current frame. When user clicks the button, the <code>onClick</code> function will be called.</p><p>The origin of screen space is upper-left corner and the positive Y direction is downward.</p><p>The drawn button will only last for one frame. You should put this under the <code>Update</code> function (or a function that is called by the <code>Update</code> function) to keep the button stays in every frame.</p><p>If this function is called by a lifecycle event function, then the <code>onClick</code> function in the fourth parameter could also be considered as a lifecycle event function.</p><p>This means that you can use other functions from this module inside the <code>onClick</code> function, even though the functions are not under the <code>Outside Lifecycle</code> category.</p><p>For example, the code piece below<pre><code>import {init_unity_academy_3d, set_start, set_update, instantiate, gui_button, set_position }\nfrom \"unity_academy\";\ninit_unity_academy_3d();\n\nconst cube = instantiate(\"cube\");\n\nconst cube_update = (gameObject) =&gt; {\n  gui_button(\"Button\", 1000, 300, 200, 50, ()=&gt;\n    set_position(gameObject, 0, 10, 6) // calling set_position inside the onClick function\n  );\n};\n\nset_update(cube, cube_update);</code></pre>\nis correct.</p><p>You can use rich text for the parameter <code>text</code>. For example: <code>gui_button(\"&lt;color=#AA00FF&gt;Hello World&lt;/color&gt;\", 100, 100, 200, 50, my_onclick_function);</code></p>",
    "params": [
      [
        "text",
        "string"
      ],
      [
        "x",
        "number"
      ],
      [
        "y",
        "number"
      ],
      [
        "width",
        "number"
      ],
      [
        "height",
        "number"
      ],
      [
        "onClick",
        "Function"
      ]
    ],
    "retType": "void"
  },
  "gui_label": {
    "kind": "function",
    "name": "gui_label",
    "description": "<p>Draw a text (string) on the screen with given <strong>screen space position</strong> in the current frame.</p><p>The origin of screen space is upper-left corner and the positive Y direction is downward.</p><p>The drawn text will only last for one frame. You should put this under the <code>Update</code> function (or a function that is called by the <code>Update</code> function) to keep the text stays in every frame.</p><p>You can use rich text for the parameter <code>text</code>. For example: <code>gui_label(\"&lt;color=#AA00FF&gt;Hello World&lt;/color&gt;\", 100, 100);</code></p>",
    "params": [
      [
        "text",
        "string"
      ],
      [
        "x",
        "number"
      ],
      [
        "y",
        "number"
      ]
    ],
    "retType": "void"
  },
  "init_unity_academy_2d": {
    "kind": "function",
    "name": "init_unity_academy_2d",
    "description": "<p>Load and initialize Unity Academy WebGL player and set it to 2D mode. All other functions (except Maths functions) in this module requires calling this function or <code>init_unity_academy_3d</code> first.</p><p>I recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.</p>",
    "params": [],
    "retType": "void"
  },
  "init_unity_academy_3d": {
    "kind": "function",
    "name": "init_unity_academy_3d",
    "description": "<p>Load and initialize Unity Academy WebGL player and set it to 3D mode. All other functions (except Maths functions) in this module requires calling this function or <code>init_unity_academy_2d</code> first.</p><p>I recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.</p>",
    "params": [],
    "retType": "void"
  },
  "instantiate": {
    "kind": "function",
    "name": "instantiate",
    "description": "<p>Creates a new GameObject from an existing Prefab</p><p><strong>3D mode only</strong></p><p>A prefab is something that is pre-built and can be created and used as a whole.</p><p>Available Prefab Information: &lt;a href = 'https://unity-academy.s3.ap-southeast-1.amazonaws.com/webgl_assetbundles/prefab_info.html' rel=\"noopener noreferrer\" target=\"_blank\"&gt;Click Here&lt;/a&gt;</p>",
    "params": [
      [
        "prefab_name",
        "string"
      ]
    ],
    "retType": "GameObjectIdentifier"
  },
  "instantiate_empty": {
    "kind": "function",
    "name": "instantiate_empty",
    "description": "<p>Creates a new empty GameObject.</p><p>An empty GameObject is invisible and only have transform properties by default.</p><p>You may use the empty GameObject to run some general game management code or use the position of the empty GameObject to represent a point in the scene that the rest of your codes can access and utilize.</p>",
    "params": [],
    "retType": "GameObjectIdentifier"
  },
  "instantiate_sprite": {
    "kind": "function",
    "name": "instantiate_sprite",
    "description": "<p>Creates a new 2D Sprite GameObject from an online image.</p><p>The Sprite GameObject has a BoxCollider2D that matches its size by default. You may use <code>remove_collider_components</code> function to remove the default collider.</p><p>Note that Unity Academy will use a HTTP GET request to download the image, which means that the HTTP response from the URL must allows CORS.</p><p><strong>2D mode only</strong></p>",
    "params": [
      [
        "sourceImageUrl",
        "string"
      ]
    ],
    "retType": "GameObjectIdentifier"
  },
  "look_at": {
    "kind": "function",
    "name": "look_at",
    "description": "<p>Rotates the GameObject's transform so the local forward vector points at the given position.</p><p>The +Z direction of the GameObject (with respect to the GameObject's local space), which denotes forward in Unity's conventions, will pointing to the given position.</p><p>For more information, see https://docs.unity3d.com/ScriptReference/Transform.LookAt.html</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "position",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "magnitude": {
    "kind": "function",
    "name": "magnitude",
    "description": "<p>Calcuate the magnitude of a vector</p>",
    "params": [
      [
        "vector",
        "Vector3"
      ]
    ],
    "retType": "number"
  },
  "normalize": {
    "kind": "function",
    "name": "normalize",
    "description": "<p>Normalize a vector. The returned vector will have the same direction as the original vector but have a magnitude of 1.</p>",
    "params": [
      [
        "vector",
        "Vector3"
      ]
    ],
    "retType": "Vector3"
  },
  "on_collision_enter": {
    "kind": "function",
    "name": "on_collision_enter",
    "description": "<p>Set the lifecycle event function that will be called when the collider on this GameObject just starting colliding with another collider.</p><p>The given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).</p><p>For example: <code>const myFunction = (self, other) =&gt; {...};</code></p><ul><li>Note that for collision detaction to happen, for the two colliding GameObjects:\n<ul><li>if <strong>in 3D mode</strong>, both GameObjects must applied Rigidbody by <code>apply_rigidbody</code></li><li>if <strong>in 2D mode</strong>, at least one GameObject must applied Rigidbody by <code>apply_rigidbody</code></li></ul></li></ul><p>For more information, see</p><ul><li>https://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html (For 3D Mode)</li><li>https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionEnter2D.html (For 2D Mode)</li></ul>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "eventFunction",
        "Function"
      ]
    ],
    "retType": "void"
  },
  "on_collision_exit": {
    "kind": "function",
    "name": "on_collision_exit",
    "description": "<p>Set the lifecycle event function that will be called when the collider on this GameObject just stops colliding with another collider.</p><p>The given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).</p><p>For example: <code>const myFunction = (self, other) =&gt; {...};</code></p><ul><li>Note that for collision detaction to happen, for the two colliding GameObjects:\n<ul><li>if <strong>in 3D mode</strong>, both GameObjects must applied Rigidbody by <code>apply_rigidbody</code></li><li>if <strong>in 2D mode</strong>, at least one GameObject must applied Rigidbody by <code>apply_rigidbody</code></li></ul></li></ul><p>For more information, see</p><ul><li>https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit.html (For 3D Mode)</li><li>https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit2D.html (For 2D Mode)</li></ul>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "eventFunction",
        "Function"
      ]
    ],
    "retType": "void"
  },
  "on_collision_stay": {
    "kind": "function",
    "name": "on_collision_stay",
    "description": "<p>Set the lifecycle event function that will be called per frame when the collider on this GameObject is colliding with another collider.</p><p>The given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).</p><p>For example: <code>const myFunction = (self, other) =&gt; {...};</code></p><ul><li>Note that for collision detaction to happen, for the two colliding GameObjects:\n<ul><li>if <strong>in 3D mode</strong>, both GameObjects must applied Rigidbody by <code>apply_rigidbody</code></li><li>if <strong>in 2D mode</strong>, at least one GameObject must applied Rigidbody by <code>apply_rigidbody</code></li></ul></li></ul><p>For more information, see</p><ul><li>https://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html (For 3D Mode)</li><li>https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionStay2D.html (For 2D Mode)</li></ul>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "eventFunction",
        "Function"
      ]
    ],
    "retType": "void"
  },
  "play_animator_state": {
    "kind": "function",
    "name": "play_animator_state",
    "description": "<p>Plays an Unity animation state with given name on the GameObject's animator. Note that not all game objects have Unity animations. You should ask the people who provided you the prefab asset bundle for available animation names assigned to the prefab.</p><p>If you provide an invalid animator state name, this function will not take effect.</p><p><strong>3D mode only</strong></p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "animatorStateName",
        "string"
      ]
    ],
    "retType": "void"
  },
  "point_distance": {
    "kind": "function",
    "name": "point_distance",
    "description": "<p>Calcuate the distance between two 3D points</p>",
    "params": [
      [
        "pointA",
        "Vector3"
      ],
      [
        "pointB",
        "Vector3"
      ]
    ],
    "retType": "number"
  },
  "remove_collider_components": {
    "kind": "function",
    "name": "remove_collider_components",
    "description": "<p>Removes all collider components directly attached on the given GameObject by default.</p><p>You can use this function on GameObjects those you don't want them to collide with other GameObjects.</p><p>For example, you may use this on the background image sprite GameObject in 2D scene.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "void"
  },
  "request_for_main_camera_control": {
    "kind": "function",
    "name": "request_for_main_camera_control",
    "description": "<p>Request for main camera control and get a GameObject identifier that can directly be used to control the main camera's position and rotation.</p><p>When you request for the direct control over main camera with this function, the default camera controllers will be disabled, thus the GameObject identifier returned by <code>get_main_camera_following_target</code> will become useless, as you can no longer use the default main camera controllers.</p><p>This function is for totally customizing the position and rotation of the main camera. If you'd like to simplify the camera controlling with the help of the default camera controllers in Unity Academy, please consider use <code>get_main_camera_following_target</code> function.</p>",
    "params": [],
    "retType": "GameObjectIdentifier"
  },
  "rotate_world": {
    "kind": "function",
    "name": "rotate_world",
    "description": "<p>Rotates a GameObject with given x, y and z values (Euler angle)</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "angles",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "same_gameobject": {
    "kind": "function",
    "name": "same_gameobject",
    "description": "<p>Determines whether two GameObject identifiers refers to the same GameObject.</p>",
    "params": [
      [
        "first",
        "GameObjectIdentifier"
      ],
      [
        "second",
        "GameObjectIdentifier"
      ]
    ],
    "retType": "boolean"
  },
  "scale_vector": {
    "kind": "function",
    "name": "scale_vector",
    "description": "<p>Scales a 3D vector with the given factor.</p>",
    "params": [
      [
        "vector",
        "Vector3"
      ],
      [
        "factor",
        "number"
      ]
    ],
    "retType": "Vector3"
  },
  "set_angular_drag": {
    "kind": "function",
    "name": "set_angular_drag",
    "description": "<p>Set the angular drag (similar to an air resistance that affects angular velocity) the rigidbody attached on the game object.</p><p>By default the angular drag is 0.05</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "value",
        "number"
      ]
    ],
    "retType": "void"
  },
  "set_angular_velocity": {
    "kind": "function",
    "name": "set_angular_velocity",
    "description": "<p>Set the angular velocity of the rigidbody attached on the game object.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p><p>**2D Mode Special: **In 2D mode there is no angular velocity on X nor Y axis, so the X and Y values in the Vector3 is ignored.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "angularVelocity",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "set_custom_prop": {
    "kind": "function",
    "name": "set_custom_prop",
    "description": "<p>Set a custom property with name and value on a GameObject</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "propName",
        "string"
      ],
      [
        "value",
        "any"
      ]
    ],
    "retType": "void"
  },
  "set_drag": {
    "kind": "function",
    "name": "set_drag",
    "description": "<p>Set the drag (similar to air resistance) the rigidbody attached on the game object.</p><p>By default the drag is zero.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "value",
        "number"
      ]
    ],
    "retType": "void"
  },
  "set_mass": {
    "kind": "function",
    "name": "set_mass",
    "description": "<p>Set the mass of the rigidbody attached on the game object.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "mass",
        "number"
      ]
    ],
    "retType": "void"
  },
  "set_position": {
    "kind": "function",
    "name": "set_position",
    "description": "<p>Set the world position of a given GameObject</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "position",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "set_rotation_euler": {
    "kind": "function",
    "name": "set_rotation_euler",
    "description": "<p>Set the world rotation of a given GameObject with given Euler angle rotation.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "rotation",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "set_scale": {
    "kind": "function",
    "name": "set_scale",
    "description": "<p>Set the scale (size) of a given GameObject</p><p>By default the scale of a GameObject is (1, 1, 1). Changing the scale of a GameObject along one axis will lead to a stretch or squeeze of the GameObject along that axis.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "scale",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "set_start": {
    "kind": "function",
    "name": "set_start",
    "description": "<p>Sets the Start function of a given GameObject</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "startFunction",
        "Function"
      ]
    ],
    "retType": "void"
  },
  "set_update": {
    "kind": "function",
    "name": "set_update",
    "description": "<p>Sets the Update function of a given GameObject</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "updateFunction",
        "Function"
      ]
    ],
    "retType": "void"
  },
  "set_use_gravity": {
    "kind": "function",
    "name": "set_use_gravity",
    "description": "<p>Set whether the rigidbody attached on the game object should calculate for gravity.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "useGravity",
        "boolean"
      ]
    ],
    "retType": "void"
  },
  "set_velocity": {
    "kind": "function",
    "name": "set_velocity",
    "description": "<p>Set the (linear) velocity of the rigidbody attached on the GameObject.</p><p>Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "velocity",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "translate_local": {
    "kind": "function",
    "name": "translate_local",
    "description": "<p>Moves a GameObject with given x, y and z values, <strong>with respect to its local space</strong>.</p><p>The current rotation of the GameObject will affect the real direction of movement.</p><p>In Unity, usually, the direction of +Z axis denotes forward.</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "deltaPosition",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "translate_world": {
    "kind": "function",
    "name": "translate_world",
    "description": "<p>Moves a GameObject with given x, y and z values</p>",
    "params": [
      [
        "gameObjectIdentifier",
        "GameObjectIdentifier"
      ],
      [
        "deltaPosition",
        "Vector3"
      ]
    ],
    "retType": "void"
  },
  "vector3": {
    "kind": "function",
    "name": "vector3",
    "description": "<p>Create a 3D vector</p>",
    "params": [
      [
        "x",
        "number"
      ],
      [
        "y",
        "number"
      ],
      [
        "z",
        "number"
      ]
    ],
    "retType": "Vector3"
  },
  "vector_difference": {
    "kind": "function",
    "name": "vector_difference",
    "description": "<p>Calcuate the vector difference between two vectors (vectorA - vectorB).</p>",
    "params": [
      [
        "vectorA",
        "Vector3"
      ],
      [
        "vectorB",
        "Vector3"
      ]
    ],
    "retType": "Vector3"
  },
  "zero_vector": {
    "kind": "function",
    "name": "zero_vector",
    "description": "<p>Get the zero vector</p>",
    "params": [],
    "retType": "Vector3"
  }
}