{
  "black": "<div><h4>black: string</h4><div class=\"description\"><p>A hex colour code for black (#000000).</p></div></div>",
  "blue": "<div><h4>blue: string</h4><div class=\"description\"><p>A hex colour code for blue (#5555FF).</p></div></div>",
  "crimson": "<div><h4>crimson: string</h4><div class=\"description\"><p>A hex colour code for dark red (#AA0000).</p></div></div>",
  "cyan": "<div><h4>cyan: string</h4><div class=\"description\"><p>A hex colour code for cyan (#55FFFF).</p></div></div>",
  "gray": "<div><h4>gray: string</h4><div class=\"description\"><p>A hex colour code for dark grey (#555555).</p></div></div>",
  "green": "<div><h4>green: string</h4><div class=\"description\"><p>A hex colour code for green (#00AA00).</p></div></div>",
  "lime": "<div><h4>lime: string</h4><div class=\"description\"><p>A hex colour code for light green (#55FF55).</p></div></div>",
  "navy": "<div><h4>navy: string</h4><div class=\"description\"><p>A hex colour code for dark blue (#0000AA).</p></div></div>",
  "orange": "<div><h4>orange: string</h4><div class=\"description\"><p>A hex colour code for orange (#FFAA00).</p></div></div>",
  "pink": "<div><h4>pink: string</h4><div class=\"description\"><p>A hex colour code for pink (#FF55FF).</p></div></div>",
  "purple": "<div><h4>purple: string</h4><div class=\"description\"><p>A hex colour code for purple (#AA00AA).</p></div></div>",
  "rose": "<div><h4>rose: string</h4><div class=\"description\"><p>A hex colour code for light red (#FF5555).</p></div></div>",
  "silver": "<div><h4>silver: string</h4><div class=\"description\"><p>A hex colour code for light grey (#AAAAAA). This is the default colour used  \nwhen storing a Shape.</p></div></div>",
  "teal": "<div><h4>teal: string</h4><div class=\"description\"><p>A hex colour code for dark cyan (#00AAAA).</p></div></div>",
  "white": "<div><h4>white: string</h4><div class=\"description\"><p>A hex colour code for white (#FFFFFF).</p></div></div>",
  "yellow": "<div><h4>yellow: string</h4><div class=\"description\"><p>A hex colour code for yellow (#FFFF55).</p></div></div>",
  "bounding_box": "<div><h4>bounding_box(shape: Shape) → {undefined}</h4><div class=\"description\"><p>Returns a lambda function that contains the coordinates of the bounding box.  \nProvided with the axis 'x', 'y' or 'z' and value 'min' for minimum and 'max'  \nfor maximum, it returns the coordinates of the bounding box.  </p><p>For example,  <pre><code>const a = bounding_box(sphere);  \na('x', 'min'); // Returns the minimum x coordinate of the bounding box  </code></pre>`</p></div></div>",
  "cone": "<div><h4>cone(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a cone of a set colour.</p></div></div>",
  "cube": "<div><h4>cube(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a cube of a set colour or the default colour when  \ncolour information is omitted.</p></div></div>",
  "cylinder": "<div><h4>cylinder(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a cylinder of a set colour.</p></div></div>",
  "geodesic_sphere": "<div><h4>geodesic_sphere(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a geodesic sphere of a set colour.</p></div></div>",
  "group": "<div><h4>group(children: List) → {Group}</h4><div class=\"description\"><p>Initializes a group of shapes, which is represented  \nas a hierarchical tree structure, with groups as  \ninternal nodes and shapes as leaf nodes.</p></div></div>",
  "intersect": "<div><h4>intersect(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Intersection of the two shape to produce a new shape.</p></div></div>",
  "is_group": "<div><h4>is_group(entity: unknown) → {boolean}</h4><div class=\"description\"><p>Checks if the specified entity is a Group.</p></div></div>",
  "is_shape": "<div><h4>is_shape(entity: unknown) → {boolean}</h4><div class=\"description\"><p>Checks if the specified entity is a Shape.</p></div></div>",
  "prism": "<div><h4>prism(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a prism of a set colour.</p></div></div>",
  "pyramid": "<div><h4>pyramid(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a square pyramid of a set colour.</p></div></div>",
  "render": "<div><h4>render(groupToRender: Group) → {RenderGroup}</h4><div class=\"description\"><p>Renders a Group of Shapes.</p></div></div>",
  "render_axes": "<div><h4>render_axes(groupToRender: Group) → {RenderGroup}</h4><div class=\"description\"><p>Renders a Group of Shapes, along with X, Y and Z axes.</p></div></div>",
  "render_grid": "<div><h4>render_grid(groupToRender: Group) → {RenderGroup}</h4><div class=\"description\"><p>Renders a Group of Shapes, along with a grid.</p></div></div>",
  "render_grid_axes": "<div><h4>render_grid_axes(groupToRender: Group) → {RenderGroup}</h4><div class=\"description\"><p>Renders a Group of Shapes, along with a grid and axes.</p></div></div>",
  "rgb": "<div><h4>rgb(redComponent: number, greenComponent: number, blueComponent: number) → {string}</h4><div class=\"description\"><p>Returns a hex colour code representing the colour specified by the given RGB values.</p></div></div>",
  "rotate": "<div><h4>rotate(entity: Entity, x: number, y: number, z: number) → {Entity}</h4><div class=\"description\"><p>Rotate the shape by the provided angles in the x, y and z direction.  \nAngles provided are in the form of radians (i.e. 2π represent 360  \ndegrees). Note that the order of rotation is from the x direction first,  \nfollowed by the y and z directions.</p></div></div>",
  "rounded_cube": "<div><h4>rounded_cube(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a rounded cube of a set colour.</p></div></div>",
  "rounded_cylinder": "<div><h4>rounded_cylinder(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a rounded cylinder of a set colour.</p></div></div>",
  "scale": "<div><h4>scale(entity: Entity, x: number, y: number, z: number) → {Entity}</h4><div class=\"description\"><p>Scales the shape in the x, y and z direction with the specified factor.  \nFactors must be non-zero.  \nFor example, scaling the shape by 1 in x, y and z directions results in  \nthe original shape.  \nScaling the shape by -1 in x direction and 1 in y and z directions results  \nin the reflection</p></div></div>",
  "shape_to_stl": "<div><h4>shape_to_stl(shape: Shape) → {Promise}</h4><div class=\"description\"><p>Converts a shape to an downloadable STL file, which can be used for 3D printing.</p></div></div>",
  "sphere": "<div><h4>sphere(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a sphere of a set colour.</p></div></div>",
  "star": "<div><h4>star(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of an extruded star of a set colour.</p></div></div>",
  "subtract": "<div><h4>subtract(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Subtraction of the second shape from the first shape to produce a new shape.</p></div></div>",
  "torus": "<div><h4>torus(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a Shape of a torus of a set colour.</p></div></div>",
  "translate": "<div><h4>translate(entity: Entity, x: number, y: number, z: number) → {Entity}</h4><div class=\"description\"><p>Translate / Move the shape by the provided x, y and z units from negative  \ninfinity to infinity.</p></div></div>",
  "union": "<div><h4>union(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Union of the two provided shapes to produce a new shape.</p></div></div>"
}