{
  "black": "<div><h4>black: string</h4><div class=\"description\"><p>A hex color code for black (#000000).</p></div></div>",
  "blue": "<div><h4>blue: string</h4><div class=\"description\"><p>A hex color code for blue (#5555FF).</p></div></div>",
  "crimson": "<div><h4>crimson: string</h4><div class=\"description\"><p>A hex color code for dark red (#AA0000).</p></div></div>",
  "cyan": "<div><h4>cyan: string</h4><div class=\"description\"><p>A hex color code for cyan (#55FFFF).</p></div></div>",
  "gray": "<div><h4>gray: string</h4><div class=\"description\"><p>A hex color code for dark gray (#555555).</p></div></div>",
  "green": "<div><h4>green: string</h4><div class=\"description\"><p>A hex color code for green (#00AA00).</p></div></div>",
  "lime": "<div><h4>lime: string</h4><div class=\"description\"><p>A hex color code for light green (#55FF55).</p></div></div>",
  "navy": "<div><h4>navy: string</h4><div class=\"description\"><p>A hex color code for dark blue (#0000AA).</p></div></div>",
  "orange": "<div><h4>orange: string</h4><div class=\"description\"><p>A hex color code for orange (#FFAA00).</p></div></div>",
  "pink": "<div><h4>pink: string</h4><div class=\"description\"><p>A hex color code for pink (#FF55FF).</p></div></div>",
  "purple": "<div><h4>purple: string</h4><div class=\"description\"><p>A hex color code for purple (#AA00AA).</p></div></div>",
  "rose": "<div><h4>rose: string</h4><div class=\"description\"><p>A hex color code for light red (#FF5555).</p></div></div>",
  "silver": "<div><h4>silver: string</h4><div class=\"description\"><p>A hex color code for light gray (#AAAAAA).</p></div></div>",
  "teal": "<div><h4>teal: string</h4><div class=\"description\"><p>A hex color code for dark cyan (#00AAAA).</p></div></div>",
  "white": "<div><h4>white: string</h4><div class=\"description\"><p>A hex color code for white (#FFFFFF).</p></div></div>",
  "yellow": "<div><h4>yellow: string</h4><div class=\"description\"><p>A hex color code for yellow (#FFFF55).</p></div></div>",
  "bounding_box": "<div><h4>bounding_box(shape: Shape) → {undefined}</h4><div class=\"description\"><p>Returns a function of type (string, string) → number, for getting the\nspecified Shape's bounding box coordinates.</p><p>Its first parameter must be \"x\", \"y\", or \"z\", indicating the coordinate axis.</p><p>Its second parameter must be \"min\" or \"max\", indicating the minimum or\nmaximum bounding box coordinate respectively.</p><p>For example, if a sphere of radius 0.5 is centred at (0.5, 0.5, 0.5), its\nminimum bounding coordinates will be (0, 0, 0), and its maximum bounding\ncoordinates will be (1, 1, 1).\n<pre><code>// Sample usage\nconst getter_function = bounding_box(sphere(silver));\ndisplay(getter_function(\"y\", \"max\")); // Displays 1, the maximum y coordinate</code></pre></p></div></div>",
  "cone": "<div><h4>cone(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a cone Shape in the specified color.</p><ul><li>Height: 1</li><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "cube": "<div><h4>cube(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a cube Shape in the specified color.</p><ul><li>Side length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "cylinder": "<div><h4>cylinder(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns an upright cylinder Shape in the specified color.</p><ul><li>Height: 1</li><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "download_shape_stl": "<div><h4>download_shape_stl(shape: Shape) → {Promise}</h4><div class=\"description\"><p>Exports the specified Shape as an STL file, downloaded to your device.</p><p>The file can be used for purposes such as 3D printing.</p></div></div>",
  "geodesic_sphere": "<div><h4>geodesic_sphere(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a geodesic sphere Shape in the specified color.</p><ul><li>Radius: 0.5</li><li>Center: Floating at (0.5, 0.5, 0.5)</li></ul></div></div>",
  "group": "<div><h4>group(operables: List) → {Group}</h4><div class=\"description\"><p>Groups the specified list of Operables together. Groups can contain a mix of\nShapes and other nested Groups.</p><p>Groups cannot be operated on, but can be transformed together. I.e. a call\nlike <code>intersect(group_a, group_b)</code> is not allowed, but a call like\n<code>scale(group, 5, 5, 5)</code> is.</p></div></div>",
  "intersect": "<div><h4>intersect(first: Shape, second: Shape) → {Shape}</h4><div class=\"description\"><p>Returns the intersection of the two specified Shapes.</p></div></div>",
  "is_group": "<div><h4>is_group(parameter: unknown) → {boolean}</h4><div class=\"description\"><p>Checks if the given parameter is a Group.</p></div></div>",
  "is_shape": "<div><h4>is_shape(parameter: unknown) → {boolean}</h4><div class=\"description\"><p>Checks if the given parameter is a Shape.</p></div></div>",
  "prism": "<div><h4>prism(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns an upright triangular prism Shape in the specified color.</p><ul><li>Height: 1</li><li>Side length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "pyramid": "<div><h4>pyramid(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a square pyramid Shape in the specified color.</p><ul><li>Height: 1</li><li>Base length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "render": "<div><h4>render(operable: Operable) → {RenderGroup}</h4><div class=\"description\"><p>Renders the specified Operable.</p></div></div>",
  "render_axes": "<div><h4>render_axes(operable: Operable) → {RenderGroup}</h4><div class=\"description\"><p>Renders the specified Operable, along with z, y, and z axes.</p></div></div>",
  "render_grid": "<div><h4>render_grid(operable: Operable) → {RenderGroup}</h4><div class=\"description\"><p>Renders the specified Operable, along with a grid.</p></div></div>",
  "render_grid_axes": "<div><h4>render_grid_axes(operable: Operable) → {RenderGroup}</h4><div class=\"description\"><p>Renders the specified Operable, along with both a grid and axes.</p></div></div>",
  "rgb": "<div><h4>rgb(redValue: number, greenValue: number, blueValue: number) → {string}</h4><div class=\"description\"><p>Returns a hex color code representing the specified RGB values.</p></div></div>",
  "rotate": "<div><h4>rotate(operable: Operable, xAngle: number, yAngle: number, zAngle: number) → {Operable}</h4><div class=\"description\"><p>Sequentially rotates the specified Operable about the x, y, and z axes using\nthe specified angles, in radians (i.e. 2π represents 360°).</p><p>The order of rotation is: x, y, then z axis. The order of rotation can affect\nthe result, so you may wish to make multiple separate calls to rotate() if\nyou require a specific order of rotation.</p></div></div>",
  "rounded_cube": "<div><h4>rounded_cube(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a rounded cube Shape in the specified color.</p><ul><li>Side length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "rounded_cylinder": "<div><h4>rounded_cylinder(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a rounded, upright cylinder Shape in the specified color.</p><ul><li>Height: 1</li><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "scale": "<div><h4>scale(operable: Operable, xFactor: number, yFactor: number, zFactor: number) → {Operable}</h4><div class=\"description\"><p>Scales the specified Operable in the x, y, and z directions using the\nspecified factors. Scaling is done about the origin (0, 0, 0).</p><p>For example, a factor of 0.5 results in a smaller Shape, while a factor of 2\nresults in a larger Shape. A factor of 1 results in the original Shape.\nFactors must be greater than 0.</p></div></div>",
  "sphere": "<div><h4>sphere(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a sphere Shape in the specified color.</p><ul><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "star": "<div><h4>star(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns an upright extruded star Shape in the specified color.</p><ul><li>Height: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul></div></div>",
  "subtract": "<div><h4>subtract(target: Shape, subtractedShape: Shape) → {Shape}</h4><div class=\"description\"><p>Subtracts the second Shape from the first Shape, returning the resultant\nShape.</p></div></div>",
  "torus": "<div><h4>torus(hex: string) → {Shape}</h4><div class=\"description\"><p>Returns a torus (donut) Shape in the specified color.</p><ul><li>Inner radius: 0.15 (ring is 0.3 thick)</li><li>Total radius: 0.5 (from the centre of the hole to \"outside\")</li><li>Center: Floating at (0.5, 0.5, 0.5)</li></ul></div></div>",
  "translate": "<div><h4>translate(operable: Operable, xOffset: number, yOffset: number, zOffset: number) → {Operable}</h4><div class=\"description\"><p>Translates (moves) the specified Operable in the x, y, and z directions using\nthe specified offsets.</p></div></div>",
  "ungroup": "<div><h4>ungroup(g: Group) → {List}</h4><div class=\"description\"><p>Ungroups the specified Group, returning the list of Shapes and/or nested\nGroups contained within.</p></div></div>",
  "union": "<div><h4>union(first: Shape, second: Shape) → {Shape}</h4><div class=\"description\"><p>Returns the union of the two specified Shapes.</p></div></div>"
}