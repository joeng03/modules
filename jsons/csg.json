{
  "black": {
    "kind": "variable",
    "name": "black",
    "description": "<p>A hex color code for black (#000000).</p>",
    "type": "string"
  },
  "blue": {
    "kind": "variable",
    "name": "blue",
    "description": "<p>A hex color code for blue (#5555FF).</p>",
    "type": "string"
  },
  "crimson": {
    "kind": "variable",
    "name": "crimson",
    "description": "<p>A hex color code for dark red (#AA0000).</p>",
    "type": "string"
  },
  "cyan": {
    "kind": "variable",
    "name": "cyan",
    "description": "<p>A hex color code for cyan (#55FFFF).</p>",
    "type": "string"
  },
  "gray": {
    "kind": "variable",
    "name": "gray",
    "description": "<p>A hex color code for dark gray (#555555).</p>",
    "type": "string"
  },
  "green": {
    "kind": "variable",
    "name": "green",
    "description": "<p>A hex color code for green (#00AA00).</p>",
    "type": "string"
  },
  "lime": {
    "kind": "variable",
    "name": "lime",
    "description": "<p>A hex color code for light green (#55FF55).</p>",
    "type": "string"
  },
  "navy": {
    "kind": "variable",
    "name": "navy",
    "description": "<p>A hex color code for dark blue (#0000AA).</p>",
    "type": "string"
  },
  "orange": {
    "kind": "variable",
    "name": "orange",
    "description": "<p>A hex color code for orange (#FFAA00).</p>",
    "type": "string"
  },
  "pink": {
    "kind": "variable",
    "name": "pink",
    "description": "<p>A hex color code for pink (#FF55FF).</p>",
    "type": "string"
  },
  "purple": {
    "kind": "variable",
    "name": "purple",
    "description": "<p>A hex color code for purple (#AA00AA).</p>",
    "type": "string"
  },
  "rose": {
    "kind": "variable",
    "name": "rose",
    "description": "<p>A hex color code for light red (#FF5555).</p>",
    "type": "string"
  },
  "silver": {
    "kind": "variable",
    "name": "silver",
    "description": "<p>A hex color code for light gray (#AAAAAA).</p>",
    "type": "string"
  },
  "teal": {
    "kind": "variable",
    "name": "teal",
    "description": "<p>A hex color code for dark cyan (#00AAAA).</p>",
    "type": "string"
  },
  "white": {
    "kind": "variable",
    "name": "white",
    "description": "<p>A hex color code for white (#FFFFFF).</p>",
    "type": "string"
  },
  "yellow": {
    "kind": "variable",
    "name": "yellow",
    "description": "<p>A hex color code for yellow (#FFFF55).</p>",
    "type": "string"
  },
  "bounding_box": {
    "kind": "function",
    "name": "bounding_box",
    "description": "<p>Returns a function of type (string, string) → number, for getting the\nspecified Shape's bounding box coordinates.</p><p>Its first parameter must be \"x\", \"y\", or \"z\", indicating the coordinate axis.</p><p>Its second parameter must be \"min\" or \"max\", indicating the minimum or\nmaximum bounding box coordinate respectively.</p><p>For example, if a sphere of radius 0.5 is centred at (0.5, 0.5, 0.5), its\nminimum bounding coordinates will be (0, 0, 0), and its maximum bounding\ncoordinates will be (1, 1, 1).\n<pre><code>// Sample usage\nconst getter_function = bounding_box(sphere(silver));\ndisplay(getter_function(\"y\", \"max\")); // Displays 1, the maximum y coordinate</code></pre></p>",
    "params": [
      [
        "shape",
        "Shape"
      ]
    ],
    "retType": "Function"
  },
  "cone": {
    "kind": "function",
    "name": "cone",
    "description": "<p>Returns a cone Shape in the specified color.</p><ul><li>Height: 1</li><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "cube": {
    "kind": "function",
    "name": "cube",
    "description": "<p>Returns a cube Shape in the specified color.</p><ul><li>Side length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "cylinder": {
    "kind": "function",
    "name": "cylinder",
    "description": "<p>Returns an upright cylinder Shape in the specified color.</p><ul><li>Height: 1</li><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "download_shape_stl": {
    "kind": "function",
    "name": "download_shape_stl",
    "description": "<p>Exports the specified Shape as an STL file, downloaded to your device.</p><p>The file can be used for purposes such as 3D printing.</p>",
    "params": [
      [
        "shape",
        "Shape"
      ]
    ],
    "retType": "Promise<void>"
  },
  "empty_shape": {
    "kind": "function",
    "name": "empty_shape",
    "description": "<p>An empty Shape.</p>",
    "params": [],
    "retType": "Shape"
  },
  "geodesic_sphere": {
    "kind": "function",
    "name": "geodesic_sphere",
    "description": "<p>Returns a geodesic sphere Shape in the specified color.</p><ul><li>Radius: 0.5</li><li>Center: Floating at (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "group": {
    "kind": "function",
    "name": "group",
    "description": "<p>Groups the specified list of Operables together. Groups can contain a mix of\nShapes and other nested Groups.</p><p>Groups cannot be operated on, but can be transformed together. I.e. a call\nlike <code>intersect(group_a, group_b)</code> is not allowed, but a call like\n<code>scale(group, 5, 5, 5)</code> is.</p>",
    "params": [
      [
        "operables",
        "List"
      ]
    ],
    "retType": "Group"
  },
  "intersect": {
    "kind": "function",
    "name": "intersect",
    "description": "<p>Returns the intersection of the two specified Shapes.</p>",
    "params": [
      [
        "first",
        "Shape"
      ],
      [
        "second",
        "Shape"
      ]
    ],
    "retType": "Shape"
  },
  "is_group": {
    "kind": "function",
    "name": "is_group",
    "description": "<p>Checks if the given parameter is a Group.</p>",
    "params": [
      [
        "parameter",
        "unknown"
      ]
    ],
    "retType": "boolean"
  },
  "is_shape": {
    "kind": "function",
    "name": "is_shape",
    "description": "<p>Checks if the given parameter is a Shape.</p>",
    "params": [
      [
        "parameter",
        "unknown"
      ]
    ],
    "retType": "boolean"
  },
  "prism": {
    "kind": "function",
    "name": "prism",
    "description": "<p>Returns an upright triangular prism Shape in the specified color.</p><ul><li>Height: 1</li><li>Side length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "pyramid": {
    "kind": "function",
    "name": "pyramid",
    "description": "<p>Returns a square pyramid Shape in the specified color.</p><ul><li>Height: 1</li><li>Base length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "render": {
    "kind": "function",
    "name": "render",
    "description": "<p>Renders the specified Operable.</p>",
    "params": [
      [
        "operable",
        "Operable"
      ]
    ],
    "retType": "RenderGroup"
  },
  "render_axes": {
    "kind": "function",
    "name": "render_axes",
    "description": "<p>Renders the specified Operable, along with z, y, and z axes.</p>",
    "params": [
      [
        "operable",
        "Operable"
      ]
    ],
    "retType": "RenderGroup"
  },
  "render_grid": {
    "kind": "function",
    "name": "render_grid",
    "description": "<p>Renders the specified Operable, along with a grid.</p>",
    "params": [
      [
        "operable",
        "Operable"
      ]
    ],
    "retType": "RenderGroup"
  },
  "render_grid_axes": {
    "kind": "function",
    "name": "render_grid_axes",
    "description": "<p>Renders the specified Operable, along with both a grid and axes.</p>",
    "params": [
      [
        "operable",
        "Operable"
      ]
    ],
    "retType": "RenderGroup"
  },
  "rgb": {
    "kind": "function",
    "name": "rgb",
    "description": "<p>Returns a hex color code representing the specified RGB values.</p>",
    "params": [
      [
        "redValue",
        "number"
      ],
      [
        "greenValue",
        "number"
      ],
      [
        "blueValue",
        "number"
      ]
    ],
    "retType": "string"
  },
  "rotate": {
    "kind": "function",
    "name": "rotate",
    "description": "<p>Sequentially rotates the specified Operable about the x, y, and z axes using\nthe specified angles, in radians (i.e. 2π represents 360°).</p><p>The order of rotation is: x, y, then z axis. The order of rotation can affect\nthe result, so you may wish to make multiple separate calls to rotate() if\nyou require a specific order of rotation.</p>",
    "params": [
      [
        "operable",
        "Operable"
      ],
      [
        "xAngle",
        "number"
      ],
      [
        "yAngle",
        "number"
      ],
      [
        "zAngle",
        "number"
      ]
    ],
    "retType": "Operable"
  },
  "rounded_cube": {
    "kind": "function",
    "name": "rounded_cube",
    "description": "<p>Returns a rounded cube Shape in the specified color.</p><ul><li>Side length: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "rounded_cylinder": {
    "kind": "function",
    "name": "rounded_cylinder",
    "description": "<p>Returns a rounded, upright cylinder Shape in the specified color.</p><ul><li>Height: 1</li><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "scale": {
    "kind": "function",
    "name": "scale",
    "description": "<p>Scales the specified Operable in the x, y, and z directions using the\nspecified factors. Scaling is done about the origin (0, 0, 0).</p><p>For example, a factor of 0.5 results in a smaller Shape, while a factor of 2\nresults in a larger Shape. A factor of 1 results in the original Shape.\nFactors must be greater than 0.</p>",
    "params": [
      [
        "operable",
        "Operable"
      ],
      [
        "xFactor",
        "number"
      ],
      [
        "yFactor",
        "number"
      ],
      [
        "zFactor",
        "number"
      ]
    ],
    "retType": "Operable"
  },
  "sphere": {
    "kind": "function",
    "name": "sphere",
    "description": "<p>Returns a sphere Shape in the specified color.</p><ul><li>Radius: 0.5</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "star": {
    "kind": "function",
    "name": "star",
    "description": "<p>Returns an upright extruded star Shape in the specified color.</p><ul><li>Height: 1</li><li>Center: (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "subtract": {
    "kind": "function",
    "name": "subtract",
    "description": "<p>Subtracts the second Shape from the first Shape, returning the resultant\nShape.</p>",
    "params": [
      [
        "target",
        "Shape"
      ],
      [
        "subtractedShape",
        "Shape"
      ]
    ],
    "retType": "Shape"
  },
  "torus": {
    "kind": "function",
    "name": "torus",
    "description": "<p>Returns a torus (donut) Shape in the specified color.</p><ul><li>Inner radius: 0.15 (ring is 0.3 thick)</li><li>Total radius: 0.5 (from the centre of the hole to \"outside\")</li><li>Center: Floating at (0.5, 0.5, 0.5)</li></ul>",
    "params": [
      [
        "hex",
        "string"
      ]
    ],
    "retType": "Shape"
  },
  "translate": {
    "kind": "function",
    "name": "translate",
    "description": "<p>Translates (moves) the specified Operable in the x, y, and z directions using\nthe specified offsets.</p>",
    "params": [
      [
        "operable",
        "Operable"
      ],
      [
        "xOffset",
        "number"
      ],
      [
        "yOffset",
        "number"
      ],
      [
        "zOffset",
        "number"
      ]
    ],
    "retType": "Operable"
  },
  "ungroup": {
    "kind": "function",
    "name": "ungroup",
    "description": "<p>Ungroups the specified Group, returning the list of Shapes and/or nested\nGroups contained within.</p>",
    "params": [
      [
        "g",
        "Group"
      ]
    ],
    "retType": "List"
  },
  "union": {
    "kind": "function",
    "name": "union",
    "description": "<p>Returns the union of the two specified Shapes.</p>",
    "params": [
      [
        "first",
        "Shape"
      ],
      [
        "second",
        "Shape"
      ]
    ],
    "retType": "Shape"
  }
}